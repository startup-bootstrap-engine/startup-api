version: "3.8"

services:
  startup-api:
    image: startup-engine/team:api-latest
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5002"]
      interval: 60s
      timeout: 30s
      retries: 5
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.labels.api == true
        preferences:
          - spread: node.id
        max_replicas_per_node: 1
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 2
        delay: 10s
      labels:
        # Basic setup for API config
        - traefik.enable=true
        - traefik.http.routers.startup-api.rule=Host(`na.startup-engine.com`)
        - traefik.http.routers.startup-api.entrypoints=websecure
        - traefik.http.routers.startup-api.tls.certresolver=myresolver
        - traefik.http.services.startup-api-service.loadbalancer.server.port=5002
        - traefik.http.routers.startup-api.service=startup-api-service

        # Websockets
        - traefik.http.routers.startup-api-socket.rule=Host(`na.startup-engine.com`) && Path(`/socket.io/`)
        - traefik.http.routers.startup-api-socket.entrypoints=websecure
        - traefik.http.routers.startup-api-socket.tls.certresolver=myresolver
        - traefik.http.services.startup-api-socket-service.loadbalancer.server.port=5101
        - traefik.http.routers.startup-api-socket.service=startup-api-socket-service

        # Add sticky session for websockets
        - "traefik.http.services.startup-api-socket-service.loadbalancer.sticky=true"
        - "traefik.http.services.startup-api-socket-service.loadbalancer.sticky.cookie.name=StickyCookie"
        - "traefik.http.services.startup-api-socket-service.loadbalancer.sticky.cookie.secure=true"

        - "traefik.http.middlewares.websocket.headers.customrequestheaders.Connection=Upgrade"
        - "traefik.http.middlewares.websocket.headers.customrequestheaders.Upgrade=websocket"
        - "traefik.http.routers.startup-api-socket.middlewares=websocket@docker"

    logging:
      driver: "json-file"
      options:
        max-size: "5m" # Reduced from "10m"
        max-file: "2" # Reduced from "3"
    environment:
      FORCE_COLOR: "true"
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NEW_RELIC_APP_NAME: "API"
      RABBITMQ_HOST: "${RABBITMQ_HOST}"
      RABBITMQ_PORT: "${RABBITMQ_PORT}"
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    networks:
      - startup-network
    depends_on:
      - startup-rabbitmq
      - startup-redis
      - startup-db

  startup-client:
    image: startup-engine/team:client-latest
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080"]
      interval: 120s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m" # Reduced from "10m"
        max-file: "2" # Reduced from "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.startup-client.rule=Host(`play.startup-engine.com`)"
        - "traefik.http.routers.startup-client.entrypoints=websecure"
        - "traefik.http.routers.startup-client.tls.certresolver=myresolver"
        - "traefik.http.services.startup-client.loadbalancer.server.port=8080"
      placement:
        constraints:
          - node.labels.accessory == true
    environment:
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NEW_RELIC_APP_NAME: "StartupEngine Client"
    networks:
      - startup-network

  startup-docs:
    image: startup-engine/team:docs-latest
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000"]
      interval: 120s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m" # Reduced from "10m"
        max-file: "2" # Reduced from "3"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.startup-docs.rule=Host(`docs.startup-engine.com`) || Host(`startup-engine.com`)"
        - "traefik.http.routers.startup-docs.entrypoints=websecure"
        - "traefik.http.routers.startup-docs.tls.certresolver=myresolver"
        - "traefik.http.services.startup-docs.loadbalancer.server.port=3000"
      placement:
        constraints:
          - node.labels.accessory == true
    environment:
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NEW_RELIC_APP_NAME: "StartupEngine Docs"
    networks:
      - startup-network

  startup-db:
    image: mongo:7.0.0
    command: mongod --port ${MONGO_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: "5m" # Reduced from "10m"
        max-file: "2" # Reduced from "3"
    volumes:
      - startup-db-data:/data/db
      - ./docker_scripts/:/docker-entrypoint-initdb.d
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NEW_RELIC_APP_NAME: "StartupEngine DB"
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "mongosh", "--port", "${MONGO_PORT}", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 30s
      timeout: 15s
      retries: 3
    networks:
      - startup-network

  startup-redis:
    image: redis:7.2.0
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - startup-redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--port", "${REDIS_PORT}"]
    environment:
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NEW_RELIC_APP_NAME: "StartupEngine Redis"
    logging:
      driver: "json-file"
      options:
        max-size: "5m" # Added log rotation
        max-file: "2"
    networks:
      - startup-network
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 30s
      timeout: 15s
      retries: 3

  newrelic-infra:
    image: newrelic/infrastructure:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/host:ro
    environment:
      NRIA_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NRIA_DISPLAY_NAME: "StartupEngine Swarm Node"
    deploy:
      mode: global
    logging:
      driver: "json-file"
      options:
        max-size: "5m" # Added log rotation
        max-file: "2"
    networks:
      - startup-network

  startup-rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_PLUGINS: "rabbitmq_management"
    logging:
      driver: "json-file"
      options:
        max-size: "5m" # Reduced from "10m"
        max-file: "2" # Reduced from "5"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./environment/rabbit-init.sh:/docker-entrypoint-initdb.d/rabbit-init.sh
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.startup-rabbitmq.rule=Host(`rabbitmq.startup-engine.com`)"
      - "traefik.http.routers.startup-rabbitmq.entrypoints=websecure"
      - "traefik.http.routers.startup-rabbitmq.tls.certresolver=myresolver"
      - "traefik.http.services.startup-rabbitmq.loadbalancer.server.port=15672"
      - "traefik.http.routers.startup-rabbitmq.service=startup-rabbitmq"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - startup-network

networks:
  startup-network:
    external: true

volumes:
  startup-db-data:
  startup-redis-data:
  rabbitmq_data:
