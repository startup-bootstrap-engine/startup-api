version: "3"

services:
  rpg-api:
    container_name: rpg-api
    restart: always
    image: definya/definya-team:api-latest
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    env_file: .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    links:
      - rpg-db
      - rpg-redis
    depends_on:
      - rpg-db
      - rpg-redis
    network_mode: bridge
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
      - "$SOCKET_PORT:$SOCKET_PORT"
      # - "$SOCKET_UDP_RANGE" #!COMMENT THIS IN IF USING UDP
    environment:
      FORCE_COLOR: "true"
      VIRTUAL_HOST: ${API_SUBDOMAIN}
      LETSENCRYPT_HOST: ${API_SUBDOMAIN}
      LETSENCRYPT_EMAIL: ${ADMIN_EMAIL}
      VIRTUAL_PORT: ${SERVER_PORT}
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NEW_RELIC_APP_NAME: "Definya API"

  rpg-npc:
    container_name: rpg-npc
    restart: always
    build: .
    env_file: .env
    ports:
      - "5005:5005"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      MICROSERVICE_NAME: "rpg-npc"
      FORCE_COLOR: "true"
      CHOKIDAR_USEPOLLING: "true" # enables hot-reloading on windows host
      NEW_RELIC_LICENSE_KEY: "${NEW_RELIC_LICENSE_KEY}"
      NEW_RELIC_APP_NAME: "Definya API Dev"
    links:
      - rpg-db
    depends_on:
      - rpg-api
      - rpg-db
      - rpg-redis
    network_mode: bridge
  rpg-pathfinder:
    container_name: rpg-pathfinder
    build:
      context: ./microservices/rpg-pathfinder
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    environment:
      - GO111MODULE=on
    network_mode: bridge
  rpg-db:
    container_name: rpg-db
    image: mongo
    restart: always
    command: mongod --port ${MONGO_PORT}
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./docker_scripts/:/docker-entrypoint-initdb.d
    ports:
      - "$MONGO_PORT:$MONGO_PORT"
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    network_mode: bridge

  rpg-redis:
    container_name: rpg-redis
    restart: always
    image: redis:latest
    ports:
      - "$REDIS_PORT:$REDIS_PORT"
    expose:
      - "$REDIS_PORT"
    env_file: .env
    volumes:
      - ./config/redis.conf:/redis.conf
    command: ["redis-server", "/redis.conf", "--port", "${REDIS_PORT}"]
    network_mode: bridge

  rpg-rabbitmq:
    container_name: rpg-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./environment/rabbitmq-init.sh:/docker-entrypoint-initdb.d/rabbitmq-init.sh
    networks_mode: bridge
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 1s # Run the health check every 5 seconds
      timeout: 3s # Wait 2 seconds for a response
      retries: 3 # Mark as unhealthy after 3 failed attempts

volumes:
  rabbitmq_data:
